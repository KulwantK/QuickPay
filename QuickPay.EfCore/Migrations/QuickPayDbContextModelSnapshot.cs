// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickPay.EfCore;

namespace QuickPay.EfCore.Migrations
{
    [DbContext(typeof(QuickPayDbContext))]
    partial class QuickPayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("QuickPay.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 451.25m,
                            CardHolder = "James Smith",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditCardNumber = "421-4453-999-301",
                            ExpirationDate = new DateTime(2022, 2, 7, 10, 21, 54, 464, DateTimeKind.Local).AddTicks(9389),
                            SecurityCode = "331",
                            StateId = 1L
                        });
                });

            modelBuilder.Entity("QuickPay.Domain.Entities.Payment", b =>
                {
                    b.OwnsMany("QuickPay.Domain.Entities.PaymentState", "States", b1 =>
                        {
                            b1.Property<long>("PaymentId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Status")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PaymentId", "Id");

                            b1.ToTable("PaymentStates");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");

                            b1.HasData(
                                new
                                {
                                    PaymentId = 1L,
                                    Id = 1L,
                                    CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Status = "Processed"
                                });
                        });

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
